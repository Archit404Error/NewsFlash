{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/archit/Downloads/NewsFlash/phone-app/App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Entypo } from '@expo/vector-icons';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as Font from 'expo-font';\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      appIsReady = _useState2[0],\n      setAppIsReady = _useState2[1];\n\n  useEffect(function () {\n    function prepare() {\n      return _regeneratorRuntime.async(function prepare$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(SplashScreen.preventAutoHideAsync());\n\n            case 3:\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(Font.loadAsync(Entypo.font));\n\n            case 5:\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(new Promise(function (resolve) {\n                return setTimeout(resolve, 500);\n              }));\n\n            case 7:\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              console.warn(_context.t0);\n\n            case 12:\n              _context.prev = 12;\n              setAppIsReady(true);\n              return _context.finish(12);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 9, 12, 15]], Promise);\n    }\n\n    prepare();\n  }, []);\n  var onLayoutRootView = useCallback(function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!appIsReady) {\n              _context2.next = 3;\n              break;\n            }\n\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(SplashScreen.hideAsync());\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [appIsReady]);\n\n  if (!appIsReady) {\n    return null;\n  }\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    onLayout: onLayoutRootView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 50\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, \"NewsFlash\"));\n}","map":{"version":3,"sources":["/Users/archit/Downloads/NewsFlash/phone-app/App.js"],"names":["React","useCallback","useEffect","useState","Entypo","SplashScreen","Font","App","appIsReady","setAppIsReady","prepare","preventAutoHideAsync","loadAsync","font","Promise","resolve","setTimeout","console","warn","onLayoutRootView","hideAsync","flex","alignItems","justifyContent","fontSize"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;;;;AAEA,SAASC,MAAT,QAAuB,oBAAvB;AACA,OAAO,KAAKC,YAAZ,MAA8B,oBAA9B;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AAEA,eAAe,SAASC,GAAT,GAAe;AAC5B,kBAAoCJ,QAAQ,CAAC,KAAD,CAA5C;AAAA;AAAA,MAAOK,UAAP;AAAA,MAAmBC,aAAnB;;AAEAP,EAAAA,SAAS,CAAC,YAAM;AACd,aAAeQ,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAGUL,YAAY,CAACM,oBAAb,EAHV;;AAAA;AAAA;AAAA,+CAKUL,IAAI,CAACM,SAAL,CAAeR,MAAM,CAACS,IAAtB,CALV;;AAAA;AAAA;AAAA,+CAQU,IAAIC,OAAJ,CAAY,UAAAC,OAAO;AAAA,uBAAIC,UAAU,CAACD,OAAD,EAAU,GAAV,CAAd;AAAA,eAAnB,CARV;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUIE,cAAAA,OAAO,CAACC,IAAR;;AAVJ;AAAA;AAaIT,cAAAA,aAAa,CAAC,IAAD,CAAb;AAbJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBAC,IAAAA,OAAO;AACR,GAnBQ,EAmBN,EAnBM,CAAT;AAqBA,MAAMS,gBAAgB,GAAGlB,WAAW,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,iBAC/BO,UAD+B;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAO3BH,YAAY,CAACe,SAAb,EAP2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,EASjC,CAACZ,UAAD,CATiC,CAApC;;AAWA,MAAI,CAACA,UAAL,EAAiB;AACf,WAAO,IAAP;AACD;;AAED,SACE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE;AAAEa,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,UAAU,EAAE,QAAvB;AAAiCC,MAAAA,cAAc,EAAE;AAAjD,KADT;AAEE,IAAA,QAAQ,EAAEJ,gBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAI;AAAEK,MAAAA,QAAQ,EAAE;AAAZ,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHF,CADF;AAOD","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { Entypo } from '@expo/vector-icons';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as Font from 'expo-font';\n\nexport default function App() {\n  const [appIsReady, setAppIsReady] = useState(false);\n\n  useEffect(() => {\n    async function prepare() {\n      try {\n        // Keep the splash screen visible while we fetch resources\n        await SplashScreen.preventAutoHideAsync();\n        // Pre-load fonts, make any API calls you need to do here\n        await Font.loadAsync(Entypo.font);\n        // Artificially delay for two seconds to simulate a slow loading\n        // experience. Please remove this if you copy and paste the code!\n        await new Promise(resolve => setTimeout(resolve, 500));\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        // Tell the application to render\n        setAppIsReady(true);\n      } \n    }\n\n    prepare();\n  }, []);\n\n  const onLayoutRootView = useCallback(async () => {\n    if (appIsReady) {\n      // This tells the splash screen to hide immediately! If we call this after\n      // `setAppIsReady`, then we may see a blank screen while the app is\n      // loading its initial state and rendering its first pixels. So instead,\n      // we hide the splash screen once we know the root view has already\n      // performed layout.\n      await SplashScreen.hideAsync();\n    }\n  }, [appIsReady]);\n\n  if (!appIsReady) {\n    return null;\n  }\n\n  return (\n    <View\n      style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}\n      onLayout={onLayoutRootView}>\n      <Text style = {{ fontSize: 50, }}>NewsFlash</Text>\n    </View>\n  );\n}"]},"metadata":{},"sourceType":"module"}